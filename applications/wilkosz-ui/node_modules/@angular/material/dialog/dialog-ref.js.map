{"version":3,"file":"dialog-ref.js","sourceRoot":"","sources":["../../../../src/lib/dialog/dialog-ref.ts"],"names":[],"mappings":"OAEO,EAAC,OAAO,EAAC,MAAM,cAAc;AAIpC,2BAA2B;AAC3B,4CAA4C;AAG5C;;GAEG;AACH;IAUE,qBAAoB,WAAuB,EAAS,kBAAqC;QAV3F,iBAwCC;QA9BqB,gBAAW,GAAX,WAAW,CAAY;QAAS,uBAAkB,GAAlB,kBAAkB,CAAmB;QANzF,2EAA2E;QACnE,iBAAY,GAAiB,IAAI,OAAO,EAAE,CAAC;QAMjD,kBAAkB,CAAC,uBAAuB,CAAC,SAAS,CAClD,UAAC,KAAsC;YACrC,EAAE,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC3B,uDAAuD;gBACvD,KAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC5B,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;gBAC3B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBACrC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;gBAC7B,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,2BAAK,GAAL,UAAM,YAAkB;QACtB,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;QAC5B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,iCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IACH,kBAAC;AAAD,CAAC,AAxCD,IAwCC","sourcesContent":["import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer, MdDialogContainerAnimationState} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n// TODO(jelbourn): afterOpen and beforeClose\n\n\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed: Subject<any> = new Subject();\n\n  /** Result to be passed to afterClosed. */\n  private _result: any;\n\n  constructor(private _overlayRef: OverlayRef, public _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange.subscribe(\n      (state: MdDialogContainerAnimationState) => {\n        if (state === 'exit-start') {\n          // Transition the backdrop in parallel with the dialog.\n          this._overlayRef.detachBackdrop();\n        } else if (state === 'exit') {\n          this._overlayRef.dispose();\n          this._afterClosed.next(this._result);\n          this._afterClosed.complete();\n          this.componentInstance = null;\n        }\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._exit();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n}\n"]}