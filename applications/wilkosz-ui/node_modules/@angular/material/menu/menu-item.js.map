{"version":3,"file":"menu-item.js","sourceRoot":"","sources":["../../../../src/lib/menu/menu-item.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAC,MAAM,eAAe;OAE7D,EAAC,qBAAqB,EAAC,MAAM,mCAAmC;AAEvE;;;GAGG;AAeH;IAIE,oBAAoB,SAAmB,EAAU,WAAuB;QAApD,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAY;QAHxE,wCAAwC;QAChC,cAAS,GAAY,KAAK,CAAC;IAEwC,CAAC;IAE5E,6BAA6B;IAC7B,0BAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAID,sBAAI,gCAAQ;QAFZ,yCAAyC;aAEzC,cAAiB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aACzC,UAAa,KAAU;YACrB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;;;OAHwC;IAKzC,kCAAkC;IAClC,iCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,GAAG,CAAC;IACrC,CAAC;IAED,8FAA8F;IAC9F,qCAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;IACtC,CAAC;IAED,oCAAoC;IACpC,oCAAe,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;IACxC,CAAC;IAED,8DAA8D;IAC9D,mCAAc,GAAd,UAAe,KAAY;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IA3BD;QAAC,KAAK,EAAE;;8CAAA;IA1BV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,iCAAiC;YAC3C,IAAI,EAAE;gBACJ,MAAM,EAAE,UAAU;gBAClB,uBAAuB,EAAE,MAAM;gBAC/B,iBAAiB,EAAE,gBAAgB;gBACnC,sBAAsB,EAAE,qBAAqB;gBAC7C,iBAAiB,EAAE,oBAAoB;gBACvC,SAAS,EAAE,wBAAwB;aACpC;YACD,WAAW,EAAE,gBAAgB;YAC7B,QAAQ,EAAE,YAAY;SACvB,CAAC;;kBAAA;IAyCF,iBAAC;AAAD,CAAC,AAxCD,IAwCC","sourcesContent":["import {Component, ElementRef, Input, Renderer} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  host: {\n    'role': 'menuitem',\n    '[class.mat-menu-item]': 'true',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': '_getDisabledAttr()',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n})\nexport class MdMenuItem implements Focusable {\n  /** Whether the menu item is disabled */\n  private _disabled: boolean = false;\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n\n  /** Whether the menu item is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this._disabled ? '-1' : '0';\n  }\n\n  /** Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly. */\n  _getDisabledAttr(): boolean {\n    return this._disabled ? true : null;\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n"]}