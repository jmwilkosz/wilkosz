{"version":3,"file":"option.js","sourceRoot":"","sources":["../../../../../src/lib/core/option/option.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ModuleWithProviders,\n  Renderer,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MdOption when selected or deselected. */\nexport class MdOptionSelectionChange {\n  constructor(public source: MdOption, public isUserInput = false) { }\n}\n\n\n/**\n * Single option inside of a `<md-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdOption {\n  private _selected: boolean = false;\n  private _active: boolean = false;\n\n  /** Whether the option is disabled.  */\n  private _disabled: boolean = false;\n\n  private _id: string = `md-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  multiple: boolean = false;\n\n  /** The unique ID of the option. */\n  get id() { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _renderer: Renderer,\n    @Optional() @Inject(MATERIAL_COMPATIBILITY_MODE) public _isCompatibilityMode: boolean) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    this._active = true;\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    this._active = false;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Fetches the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  };\n\n}\n\n@NgModule({\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n})\nexport class MdOptionModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdOptionModule,\n      providers: []\n    };\n  }\n}\n"]}